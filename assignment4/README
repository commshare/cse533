	README FOR ASSIGNMENT-4 (CSE-533)
------------------------------------------------

    GROUP MEMBERS:
    . Sohil Gandhi (sogandhi)   109395892
    . Shipra Gupta (shipgupta)  109348052


		ASSIGNMENT TASK:
-------------------------------------------------
We had to implement :
- Develop an application that uses raw IP sockets to walk around an ordered list of nodes, (given as a command line argument at the source node, which is the node at which the tour was initiated)
  At each node, the application pings the preceding node in the tour.

- Sending the ping ICMP echo request messages through a SOCK_RAW-type PF_PACKET socket and implementing ARP functionality to find the Ethernet address of the target node. Finally, when the walk is
  completed, the group of nodes visited on the tour will exchange multicast messages.

- The code will consist of two process modules, a tour application module (which will implement all the functionality outlined above, except for ARP activity) and an ARP module.

Below, we have explained some of the details about our design and implementation in this assignment:

-------------------------------------------------------------------------------------------------------------------------------------------------
- HOW TO RUN:

  ./sogaship_tour [vm2 vm10 vm4 vm7...vm8]  : To run tour module on a node. The route to be followed is given as commandline parameter.

  ./sogaship_arp : To run arp on a given node.



- ARP PACKET STRUCTURE:
	
        typedef struct arp_packet
        {                                                                                                                                                                            
                      int type;
                      int proto_id;
                      unsigned short hatype;
                      unsigned char src_mac[6];
                      char src_ip[IP_SIZE];
                      unsigned char dest_mac[6];
                      char dest_ip[IP_SIZE];
       } arp_pack;
        
        
        packet_type:
	
	0 - AREQ
	1 - AREP


- LINKED_LIST OF STRUCTURES FOR CACHE:
    
    We created a structure called cache to store the information of each cache entry. The structure is defined as follows:

        /* Structure for cache entry */
        typedef struct arp_cache
        {
                    char ip_addr[IP_SIZE];                      /* IP address                                                                           */
                    unsigned char hw_addr[6];                   /* Hardware address                                                                     */
                    int ifindex;                                /* The interface to be used for reaching the matching pair <IP address, HW address>     */
                    unsigned short hatype;                      /* Hardware type                                                                        */
                    int connfd;                                 /* Unix-domain connection-socket descriptor for a connected client                      */
                    int incomplete;                             /* Marks if the cache entry is complete or not. 1-incomplete. 0-complete                */
                    struct arp_cache * next;                    /* Next entry                                                                           */
        }cache;
         

-------------------------------------------------------------------------------------------------------------------------------------------------

